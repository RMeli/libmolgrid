<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="structlibmolgrid_1_1Example" kind="struct" language="C++" prot="public">
    <compoundname>libmolgrid::Example</compoundname>
    <includes refid="example_8h" local="no">example.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structlibmolgrid_1_1Example_1a3034c08e7d9765b2f120d44d49d33927" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structlibmolgrid_1_1CoordinateSet" kindref="compound">CoordinateSet</ref> &gt;</type>
        <definition>std::vector&lt;CoordinateSet&gt; sets</definition>
        <argsstring></argsstring>
        <name>sets</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="63" column="17" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="63" bodyend="-1"/>
        <referencedby refid="classlibmolgrid_1_1ExampleExtractor_1a16688c316082e3c32e65e8c0bb03fe9f" compoundref="example__extractor_8cpp" startline="21" endline="52">ExampleExtractor::extract</referencedby>
        <referencedby refid="classlibmolgrid_1_1Transform_1a0a9ab0c16c128621044b64543e87806b" compoundref="transform_8cpp" startline="35" endline="43">Transform::forward</referencedby>
        <referencedby refid="classlibmolgrid_1_1GridMaker_1a828a9cde89c68646dbc222bfc3046c74" compoundref="grid__maker_8cpp" startline="126" endline="141">GridMaker::forward</referencedby>
        <referencedby refid="structlibmolgrid_1_1Example_1a36e9b084e04133a39bd8473892702281" compoundref="example_8h" startline="139" endline="139">Example::make_vector_types</referencedby>
        <referencedby refid="structlibmolgrid_1_1Example_1ab1e5f47c98b8b36379ea2df5e41bc40b" compoundref="example_8h" startline="131" endline="133">Example::operator==</referencedby>
        <referencedby refid="structlibmolgrid_1_1Example_1af49e4585db4da5364523418dc95614ed" compoundref="example_8h" startline="136" endline="136">Example::tocpu</referencedby>
        <referencedby refid="structlibmolgrid_1_1Example_1a8ccac5491a7d8ed2d90302fd8827063d" compoundref="example_8h" startline="135" endline="135">Example::togpu</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structlibmolgrid_1_1Example_1a7ea04b60c00847d97627bc44a0a6b2f2" prot="public" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; labels</definition>
        <argsstring></argsstring>
        <name>labels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="64" column="17" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="64" bodyend="-1"/>
        <referencedby refid="classlibmolgrid_1_1ExampleExtractor_1a16688c316082e3c32e65e8c0bb03fe9f" compoundref="example__extractor_8cpp" startline="21" endline="52">ExampleExtractor::extract</referencedby>
        <referencedby refid="structlibmolgrid_1_1Example_1ab1e5f47c98b8b36379ea2df5e41bc40b" compoundref="example_8h" startline="131" endline="133">Example::operator==</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structlibmolgrid_1_1Example_1a0242027ec3331f3d5793c42d21b6f4e1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int group</definition>
        <argsstring></argsstring>
        <name>group</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="65" column="9" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="65" bodyend="-1"/>
        <referencedby refid="classlibmolgrid_1_1ExampleExtractor_1a16688c316082e3c32e65e8c0bb03fe9f" compoundref="example__extractor_8cpp" startline="21" endline="52">ExampleExtractor::extract</referencedby>
      </memberdef>
      <memberdef kind="variable" id="structlibmolgrid_1_1Example_1a2d552310ef0a3f6a1daa19e5c84f3168" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool seqcont</definition>
        <argsstring></argsstring>
        <name>seqcont</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="66" column="10" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="66" bodyend="-1"/>
        <referencedby refid="classlibmolgrid_1_1ExampleExtractor_1a16688c316082e3c32e65e8c0bb03fe9f" compoundref="example__extractor_8cpp" startline="21" endline="52">ExampleExtractor::extract</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a29b5e5fcb7a177c6e0ce80c9423ff231" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t num_coordinates</definition>
        <argsstring>() const</argsstring>
        <name>num_coordinates</name>
        <briefdescription>
<para>for grouped inputs, true if not first member of group </para>
        </briefdescription>
        <detaileddescription>
<para>The total number of atom across all sets </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="69" column="12" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="22" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a9cdf22c0ea09d46e82c22a9e8c62f7a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t num_types</definition>
        <argsstring>(bool unique_index_types=true) const</argsstring>
        <name>num_types</name>
        <param>
          <type>bool</type>
          <declname>unique_index_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>The maximum number of types across all sets - if unique_index_types is true, each set gets different type ids. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="72" column="12" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="30" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1ad1f4b659e53779914a303ad373b7db79" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>isCUDA</declname>
            <defname>isCUDA</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>template void sum_types</definition>
        <argsstring>(Grid&lt; float, 1, isCUDA &gt; &amp;sum, bool unique_types=true) const</argsstring>
        <name>sum_types</name>
        <param>
          <type><ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref>&lt; float, 1, isCUDA &gt; &amp;</type>
          <declname>sum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>unique_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Accumulate sum of each type class into sum. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="76" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="357" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a4fc64e09b5e884185b4dbdc86c2ec67b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlibmolgrid_1_1CoordinateSet" kindref="compound">CoordinateSet</ref></type>
        <definition>CoordinateSet merge_coordinates</definition>
        <argsstring>(unsigned start=0, bool unique_index_types=true) const</argsstring>
        <name>merge_coordinates</name>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unique_index_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Combine all coordinate sets into one and return it. All coordinate sets must have the same kind of typing. The result is a copy of the input coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">start</parametername>
</parameternamelist>
<parameterdescription>
<para>ignore coordinates sets prior to this index (default zero) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unique_indexed_types</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, different coordinate sets will have unique, non-overlapping types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="85" column="19" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="200" bodyend="230"/>
        <referencedby refid="classlibmolgrid_1_1GridMaker_1aca37b69a1f1f60ca9cc298584e7c2bb7" compoundref="grid__maker_8cpp" startline="110" endline="116">GridMaker::forward</referencedby>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1aaf8ff3176b68cb7987d5ec8c95612180" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void merge_coordinates</definition>
        <argsstring>(Grid2f &amp;coords, Grid1f &amp;type_index, Grid1f &amp;radii, unsigned start=0, bool unique_index_types=true) const</argsstring>
        <name>merge_coordinates</name>
        <param>
          <type>Grid2f &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>Grid1f &amp;</type>
          <declname>type_index</declname>
        </param>
        <param>
          <type>Grid1f &amp;</type>
          <declname>radii</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unique_index_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Combine all coordinate sets into one. All coordinate sets must have index typing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">coords</parametername>
</parameternamelist>
<parameterdescription>
<para>combined coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">type_index</parametername>
</parameternamelist>
<parameterdescription>
<para>combined types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">radii</parametername>
</parameternamelist>
<parameterdescription>
<para>combined radii </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start</parametername>
</parameternamelist>
<parameterdescription>
<para>ignore coordinates sets prior to this index (default zero) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unique_indexed_types</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, different coordinate sets will have unique, non-overlapping types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="96" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="42" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1aadbf4bff47ee7557c49edcb73e404604" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void merge_coordinates</definition>
        <argsstring>(std::vector&lt; float3 &gt; &amp;coords, std::vector&lt; float &gt; &amp;type_index, std::vector&lt; float &gt; &amp;radii, unsigned start=0, bool unique_index_types=true) const</argsstring>
        <name>merge_coordinates</name>
        <param>
          <type>std::vector&lt; float3 &gt; &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>type_index</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>radii</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unique_index_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="97" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="71" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1ad44ab023ef81acc53befe9741066de55" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void merge_coordinates</definition>
        <argsstring>(Grid2f &amp;coords, Grid2f &amp;type_vector, Grid1f &amp;radii, unsigned start=0, bool unique_index_types=true) const</argsstring>
        <name>merge_coordinates</name>
        <param>
          <type>Grid2f &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>Grid2f &amp;</type>
          <declname>type_vector</declname>
        </param>
        <param>
          <type>Grid1f &amp;</type>
          <declname>radii</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unique_index_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Combine all coordinate sets into one. All coordinate sets must have vector typing. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">coords</parametername>
</parameternamelist>
<parameterdescription>
<para>combined coordinates </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">type_index</parametername>
</parameternamelist>
<parameterdescription>
<para>combined types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">radii</parametername>
</parameternamelist>
<parameterdescription>
<para>combined radii </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">start</parametername>
</parameternamelist>
<parameterdescription>
<para>ignore coordinates sets prior to this index (default zero) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">unique_indexed_types</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, different coordinate sets will have unique, non-overlapping types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="108" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="105" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1aa0927ed6ec846f2a8e7daeb64e39795d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void merge_coordinates</definition>
        <argsstring>(std::vector&lt; float3 &gt; &amp;coords, std::vector&lt; std::vector&lt; float &gt; &gt; &amp;type_vector, std::vector&lt; float &gt; &amp;radii, unsigned start=0, bool unique_index_types=true) const</argsstring>
        <name>merge_coordinates</name>
        <param>
          <type>std::vector&lt; float3 &gt; &amp;</type>
          <declname>coords</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>type_vector</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>radii</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>unique_index_types</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="109" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="140" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1ab1e5f47c98b8b36379ea2df5e41bc40b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Example &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structlibmolgrid_1_1Example" kindref="compound">Example</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="131" column="10" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a8ccac5491a7d8ed2d90302fd8827063d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void togpu</definition>
        <argsstring>()</argsstring>
        <name>togpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="135" column="10" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1af49e4585db4da5364523418dc95614ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tocpu</definition>
        <argsstring>()</argsstring>
        <name>tocpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="136" column="10" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="136" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a36e9b084e04133a39bd8473892702281" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void make_vector_types</definition>
        <argsstring>()</argsstring>
        <name>make_vector_types</name>
        <briefdescription>
<para>Convert coordinate sets to vector types. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="139" column="10" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="139" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a7503b6a47c9b4b6cc834e6a0f8415e26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool has_vector_types</definition>
        <argsstring>(unsigned start=0) const</argsstring>
        <name>has_vector_types</name>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return true if all coord_sets &gt;= start have vector types (or is empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="142" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="232" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a2e1844ea21f945bfed11383c4ca32bf0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool has_index_types</definition>
        <argsstring>(unsigned start=0) const</argsstring>
        <name>has_index_types</name>
        <param>
          <type>unsigned</type>
          <declname>start</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return true if all coord_sets &gt;= start have index types (or is empty) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="145" column="10" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="243" bodyend="252"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1a000f4bbd3c5453860543c5ad97be617a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>isCUDA</declname>
            <defname>isCUDA</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>template void extract_labels</definition>
        <argsstring>(const std::vector&lt; Example &gt; &amp;examples, Grid&lt; float, 2, isCUDA &gt; &amp;out)</argsstring>
        <name>extract_labels</name>
        <param>
          <type>const std::vector&lt; <ref refid="structlibmolgrid_1_1Example" kindref="compound">Example</ref> &gt; &amp;</type>
          <declname>examples</declname>
        </param>
        <param>
          <type><ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref>&lt; float, 2, isCUDA &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Extract labels from a vector of examples, as returned by <ref refid="classlibmolgrid_1_1ExampleProvider_1adb4bb0435e9db0c63c1c7938385939a0" kindref="member">ExampleProvider.next_batch</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">examples</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of examples </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grid</parametername>
</parameternamelist>
<parameterdescription>
<para>2D grid (NxL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="118" column="17" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="255" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="structlibmolgrid_1_1Example_1abd2622389892168945e6f8d721072e38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>bool</type>
            <declname>isCUDA</declname>
            <defname>isCUDA</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>template void extract_label</definition>
        <argsstring>(const std::vector&lt; Example &gt; &amp;examples, unsigned labelpos, Grid&lt; float, 1, isCUDA &gt; &amp;out)</argsstring>
        <name>extract_label</name>
        <param>
          <type>const std::vector&lt; <ref refid="structlibmolgrid_1_1Example" kindref="compound">Example</ref> &gt; &amp;</type>
          <declname>examples</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>labelpos</declname>
        </param>
        <param>
          <type><ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref>&lt; float, 1, isCUDA &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Extract a specific label from a vector of examples, as returned by <ref refid="classlibmolgrid_1_1ExampleProvider_1adb4bb0435e9db0c63c1c7938385939a0" kindref="member">ExampleProvider.next_batch</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">examples</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of examples </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">labelpos</parametername>
</parameternamelist>
<parameterdescription>
<para>position of label </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">grid</parametername>
</parameternamelist>
<parameterdescription>
<para>2D grid (NxL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="128" column="17" bodyfile="/home/dkoes/git/libmolgrid/src/example.cpp" bodystart="277" bodyend="295"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A single example represented by its typed coordinates and label(s) </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>CoordinateSet</label>
        <link refid="structlibmolgrid_1_1CoordinateSet"/>
      </node>
      <node id="1">
        <label>Example</label>
        <link refid="structlibmolgrid_1_1Example"/>
        <childnode refid="2" relation="usage">
          <edgelabel>sets</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>labels</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>vector&lt; libmolgrid::CoordinateSet &gt;</label>
        <childnode refid="3" relation="usage">
          <edgelabel>elements</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>vector&lt; float &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" line="60" column="14" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/example.h" bodystart="60" bodyend="146"/>
    <listofallmembers>
      <member refid="structlibmolgrid_1_1Example_1abd2622389892168945e6f8d721072e38" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>extract_label</name></member>
      <member refid="structlibmolgrid_1_1Example_1a000f4bbd3c5453860543c5ad97be617a" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>extract_labels</name></member>
      <member refid="structlibmolgrid_1_1Example_1a0242027ec3331f3d5793c42d21b6f4e1" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>group</name></member>
      <member refid="structlibmolgrid_1_1Example_1a2e1844ea21f945bfed11383c4ca32bf0" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>has_index_types</name></member>
      <member refid="structlibmolgrid_1_1Example_1a7503b6a47c9b4b6cc834e6a0f8415e26" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>has_vector_types</name></member>
      <member refid="structlibmolgrid_1_1Example_1a7ea04b60c00847d97627bc44a0a6b2f2" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>labels</name></member>
      <member refid="structlibmolgrid_1_1Example_1a36e9b084e04133a39bd8473892702281" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>make_vector_types</name></member>
      <member refid="structlibmolgrid_1_1Example_1a4fc64e09b5e884185b4dbdc86c2ec67b" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>merge_coordinates</name></member>
      <member refid="structlibmolgrid_1_1Example_1aaf8ff3176b68cb7987d5ec8c95612180" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>merge_coordinates</name></member>
      <member refid="structlibmolgrid_1_1Example_1aadbf4bff47ee7557c49edcb73e404604" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>merge_coordinates</name></member>
      <member refid="structlibmolgrid_1_1Example_1ad44ab023ef81acc53befe9741066de55" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>merge_coordinates</name></member>
      <member refid="structlibmolgrid_1_1Example_1aa0927ed6ec846f2a8e7daeb64e39795d" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>merge_coordinates</name></member>
      <member refid="structlibmolgrid_1_1Example_1a29b5e5fcb7a177c6e0ce80c9423ff231" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>num_coordinates</name></member>
      <member refid="structlibmolgrid_1_1Example_1a9cdf22c0ea09d46e82c22a9e8c62f7a8" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>num_types</name></member>
      <member refid="structlibmolgrid_1_1Example_1ab1e5f47c98b8b36379ea2df5e41bc40b" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>operator==</name></member>
      <member refid="structlibmolgrid_1_1Example_1a2d552310ef0a3f6a1daa19e5c84f3168" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>seqcont</name></member>
      <member refid="structlibmolgrid_1_1Example_1a3034c08e7d9765b2f120d44d49d33927" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>sets</name></member>
      <member refid="structlibmolgrid_1_1Example_1ad1f4b659e53779914a303ad373b7db79" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>sum_types</name></member>
      <member refid="structlibmolgrid_1_1Example_1af49e4585db4da5364523418dc95614ed" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>tocpu</name></member>
      <member refid="structlibmolgrid_1_1Example_1a8ccac5491a7d8ed2d90302fd8827063d" prot="public" virt="non-virtual"><scope>libmolgrid::Example</scope><name>togpu</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
