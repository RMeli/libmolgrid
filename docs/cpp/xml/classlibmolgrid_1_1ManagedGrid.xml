<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classlibmolgrid_1_1ManagedGrid" kind="class" language="C++" prot="public">
    <compoundname>libmolgrid::ManagedGrid</compoundname>
    <includes refid="grid_8h" local="no">grid.h</includes>
    <templateparamlist>
      <param>
        <type>typename Dtype</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>NumDims</declname>
        <defname>NumDims</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlibmolgrid_1_1ManagedGrid_1a2e6fb40ebdb1c8bd1ba55716d6bff024" prot="public" static="no">
        <type><ref refid="classlibmolgrid_1_1ManagedGrid" kindref="compound">ManagedGrid</ref>&lt; Dtype, NumDims-1 &gt;</type>
        <definition>using subgrid_t =  ManagedGrid&lt;Dtype,NumDims-1&gt;</definition>
        <argsstring></argsstring>
        <name>subgrid_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="364" column="5" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlibmolgrid_1_1ManagedGrid_1a5f65ecf59323f2fdf69c9ba72425a1a5" prot="public" static="no">
        <type><ref refid="classlibmolgrid_1_1ManagedGridBase" kindref="compound">ManagedGridBase</ref>&lt; Dtype, NumDims &gt;</type>
        <definition>using base_t =  ManagedGridBase&lt;Dtype, NumDims&gt;</definition>
        <argsstring></argsstring>
        <name>base_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="365" column="5" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classlibmolgrid_1_1ManagedGrid_1a8e96661ffa162bb99c56ae34b11556e3" prot="protected" static="no" mutable="no">
        <type>friend</type>
        <definition>friend ManagedGrid&lt; Dtype, NumDims+1 &gt;</definition>
        <argsstring></argsstring>
        <name>ManagedGrid&lt; Dtype, NumDims+1 &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="394" column="5" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="394" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlibmolgrid_1_1ManagedGrid_1a8ead5fb1d995fcaaa3a0be1e0b653b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ManagedGrid</definition>
        <argsstring>()=default</argsstring>
        <name>ManagedGrid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="368" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classlibmolgrid_1_1ManagedGrid_1a450e51f93738ce2648184d4e7aa6bdde" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;sizeof...(I) == NumDims&gt;::type</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>ManagedGrid</definition>
        <argsstring>(I... sizes)</argsstring>
        <name>ManagedGrid</name>
        <param>
          <type>I...</type>
          <declname>sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="371" column="5" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="371" bodyend="372"/>
      </memberdef>
      <memberdef kind="function" id="classlibmolgrid_1_1ManagedGrid_1a14458c450fbf8c804da18d80f652224a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlibmolgrid_1_1ManagedGrid_1a2e6fb40ebdb1c8bd1ba55716d6bff024" kindref="member">subgrid_t</ref></type>
        <definition>subgrid_t operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Bracket indexing. </para>
        </briefdescription>
        <detaileddescription>
<para>Accessing data this way will be safe (indices are checked) and convenient, but not maximally efficient (unless the compiler is really good). Use operator() for fastest (but unchecked) access or access data directly. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="380" column="15" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classlibmolgrid_1_1ManagedGrid_1a7ff8e1562862acfd393839e9ef444657" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classlibmolgrid_1_1ManagedGrid" kindref="compound">ManagedGrid</ref>&lt; Dtype, NumDims &gt;</type>
        <definition>ManagedGrid&lt;Dtype, NumDims&gt; clone</definition>
        <argsstring>() const</argsstring>
        <name>clone</name>
        <briefdescription>
<para>Return a copy of this grid. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="387" column="17" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="387" bodyend="391"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classlibmolgrid_1_1ManagedGrid_1af59109eec7a2269b0dd17e7497f71e01" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ManagedGrid</definition>
        <argsstring>(const ManagedGridBase&lt; Dtype, NumDims+1 &gt; &amp;G, size_t i)</argsstring>
        <name>ManagedGrid</name>
        <param>
          <type>const <ref refid="classlibmolgrid_1_1ManagedGridBase" kindref="compound">ManagedGridBase</ref>&lt; Dtype, NumDims+1 &gt; &amp;</type>
          <declname>G</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" line="394" column="5" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/managed_grid.h" bodystart="395" bodyend="396"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A dense grid whose memory is managed by the class. </para>
    </briefdescription>
    <detaileddescription>
<para>Memory is allocated as unified memory so it can be safely accessed from either the CPU or GPU. Note that while the memory is accessible on the GPU, <ref refid="classlibmolgrid_1_1ManagedGrid" kindref="compound">ManagedGrid</ref> objects should only be used directly on the host. Device code should use a <ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref> view of the <ref refid="classlibmolgrid_1_1ManagedGrid" kindref="compound">ManagedGrid</ref>. Accessing <ref refid="classlibmolgrid_1_1ManagedGrid" kindref="compound">ManagedGrid</ref> data from the host while the GPU is writing to the grid will result in undefined behavior.</para>
<para>If CUDA fails to allocate unified memory (presumably due to lack of GPUs), host-only memory will be used instead.</para>
<para><ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref> is a container class of <ref refid="classlibmolgrid_1_1ManagedGrid" kindref="compound">ManagedGrid</ref> instead of a base class. Explicit transformation to a <ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref> view is required to clearly indicate how the memory should be accessed. This can be done with cpu and gpu methods or by an explicit cast to <ref refid="classlibmolgrid_1_1Grid" kindref="compound">Grid</ref>.</para>
<para>There are two class specialization to support bracket indexing. </para>
    </detaileddescription>
    <location file="/home/dkoes/git/libmolgrid/include/libmolgrid/grid.h" line="20" column="13" bodyfile="/home/dkoes/git/libmolgrid/include/libmolgrid/grid.h" bodystart="20" bodyend="-1"/>
    <listofallmembers>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a5f65ecf59323f2fdf69c9ba72425a1a5" prot="public" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>base_t</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a7ff8e1562862acfd393839e9ef444657" prot="public" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>clone</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a8ead5fb1d995fcaaa3a0be1e0b653b50" prot="public" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>ManagedGrid</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a450e51f93738ce2648184d4e7aa6bdde" prot="public" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>ManagedGrid</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1af59109eec7a2269b0dd17e7497f71e01" prot="protected" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>ManagedGrid</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a8e96661ffa162bb99c56ae34b11556e3" prot="protected" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>ManagedGrid&lt; Dtype, NumDims+1 &gt;</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a14458c450fbf8c804da18d80f652224a" prot="public" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>operator[]</name></member>
      <member refid="classlibmolgrid_1_1ManagedGrid_1a2e6fb40ebdb1c8bd1ba55716d6bff024" prot="public" virt="non-virtual"><scope>libmolgrid::ManagedGrid</scope><name>subgrid_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
